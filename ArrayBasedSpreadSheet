
public class ArrayBasedSpreadSheet {
    private Object [][] ABSpreadSheet;
    public static void main(String [] args){
        ArrayBasedSpreadSheet ab = new ArrayBasedSpreadSheet(6,6);
    //     ab.setValue('A', 3, "A1 - D4");
    //     ab.setValue('D', 4, "2");
    //     ab.setValue('A', 1, "5");
    //     ab.getValue('A', 3);
    //     Object[][] copy = ab.getCopyOfData();
    //     copy [0][0] = "99";
    //     System.out.println(ab.ABSpreadSheet[0][0]);
    //     // System.out.println(copy[0][0] = "99");
    //     // System.out.println(ab.ABSpreadSheet[0][0]);
        ab.setValue('E', 8, "4");
        System.out.print(ab.getSpreadSheetAsCSV(false));
    }
    public ArrayBasedSpreadSheet(int rows, int columns){
        ABSpreadSheet = new Object[columns][rows];
    }
    //--------------------------------------
    //  * @param showFormulas if true, show the raw cell formulas. 
    // If false, show the value generatedby calculating the formulas.
    //  * @return a String, comma separated values representation of the entire spreadsheet. Each line
    // ends with "\n"
    
    public String getSpreadSheetAsCSV(boolean showFormulas){
        String s = "";
        int y = ABSpreadSheet.length;
        char x = (char)(y + 64); 
            for (char b = 'A'; b <= x; b++){
                if (b < x){
                    s = s + (b + ",");
                }
                else if (b == x){
                    s = s+ (b + "\n");
            }
        }
        if (showFormulas == false){
            char a = 'A';
            for (int i = 0; i <= y-1;i++,a++){
                for (int j = 0; j <= ABSpreadSheet[0].length-1; j++){
                    int RO = j+1;
                    if (j < ABSpreadSheet[0].length-1){
                        s = s+(getValue(a,RO) + ",");
                    }
                    else if (j == ABSpreadSheet[0].length-1){
                        s = s+(getValue(a, RO) + "\n");
                    }
                }
            }
    return s;
    }
        else if (showFormulas == true){
            for (int i = 0; i <= ABSpreadSheet.length-1;i++){
                for (int j = 0; j <= ABSpreadSheet[0].length-1;j++){
                    if (j < ABSpreadSheet[0].length-1 && ABSpreadSheet[i][j] != null){
                        s = s + (ABSpreadSheet[i][j] + ",");
                    }
                    else if (j < ABSpreadSheet[0].length-1 && ABSpreadSheet[i][j] == null){
                        s = s + ((double)0) + ",";
                    }
                    else if (j == ABSpreadSheet[0].length-1 && ABSpreadSheet[i][j] != null){
                        s = s + (ABSpreadSheet[i][j] + "\n");
                    }
                    else if (j == ABSpreadSheet[0].length-1 && ABSpreadSheet[i][j] == null){
                        s = s + ((double)0) + "\n";
                    }
                }
            }
        }
        return s;
    }
    //------------------------------------ 
    public void setValue(char column, int row, String value){
        int a = (char)column-64;
        if (a > ABSpreadSheet.length && row <= ABSpreadSheet[0].length){
            expandColumnRange(column);
        }
        else if (a <= ABSpreadSheet.length && row > ABSpreadSheet[0].length){
            expandRowLength(row);
        }
        else if (a > ABSpreadSheet.length && row > ABSpreadSheet[0].length){
            Object [][] expandBoth = new Object [a][row];
                for (int col = 0; col <= ABSpreadSheet.length-1; col++){
                    for (int r = 0; r <= ABSpreadSheet[0].length-1; r++){
                        expandBoth[col][r] = ABSpreadSheet[col][r];
                    }
                }           
            ABSpreadSheet = expandBoth;
        } 
        int c = (char)column-65;
        int R = row-1;
        if (R >= 0){
            if (value.split(" ").length == 1){
                ABSpreadSheet[c][R] = Double.parseDouble(value);
            }
            else{
                ABSpreadSheet[c][R] = value;
            }
        }
    }
    //-----------------------------------------------
    /**
     * Returns a complete copy of the spreadsheet data. Since it is a COPY, any edits to the copy
     will have no effect on the spreadsheet itself.
     * @return a complete copy of the spreadsheet data 
     */
    public Object[][] getCopyOfData(){
        Object [][] SheetCopy = new Object [ABSpreadSheet.length][ABSpreadSheet[0].length];
        for (int col = 0; col <= ABSpreadSheet.length-1; col++){
            for (int r = 0; r <= ABSpreadSheet[col].length-1; r++){
                    if (ABSpreadSheet[col][r] == null){
                        SheetCopy[col][r] = (double) 0; //took out ""
                    }
                else{
                SheetCopy[col][r] = ABSpreadSheet[col][r];
            }
        }
    }
        return SheetCopy;
    }
    //------------------------------------------
    /**
     * Expand the spreadsheet to extend it to the given column. 
     * @param column
     */
    public void expandColumnRange(char column){
        int expC = (char)column-64;
        Object [][] expandSheet = new Object[expC][ABSpreadSheet[0].length];
            for (int col = 0; col <= ABSpreadSheet.length-1; col++){
            for (int r = 0; r <= ABSpreadSheet[0].length-1; r++){
            expandSheet[col][r] = ABSpreadSheet[col][r];
            }
            }           
        ABSpreadSheet = expandSheet;
    }
    //---------------------
    public void expandRowLength(int row){
        Object [][] expandSheet1 = new Object [ABSpreadSheet.length][row];
            for (int c = 0; c <= ABSpreadSheet.length-1; c++){
                for (int r = 0; r <= ABSpreadSheet[0].length-1; r++){
                    expandSheet1[c][r] = ABSpreadSheet[c][r];
                }
            }
        ABSpreadSheet = expandSheet1;
    }
    //------------------------------------------
    /**
     * Returns a copy of a given column through a given row.
     * If throughRow is larger than the current height of the column, all the values in the rows past
     the current column height will be null.
     * @param c the column to get, between 'A' and 'Z' 
     * @param throughRow the row to get a copy through.
     * @return
     */
    public Object[] getCopyOfColumnThroughRow(char c, int throughRow){
        int colC = (char)c-65;
        Object [] copy1 = new Object[throughRow];
            if (throughRow <= ABSpreadSheet[0].length){
                for (int z = 0; z <= throughRow-1;z++){
                    copy1[z] = ABSpreadSheet[colC][z];
                }
            }
            else if (throughRow > ABSpreadSheet[0].length){
                return null;
            }
        return copy1;
    }
    //---------------------------------------------
    /** *
     * @param column (first column is A)
     * @param row (first row is 1)
     * @return value stored in that cell. If it holds a double, return the double. If it holds a
    formula, return the result of calculating the formula stored in the cell. If the cell is empty, it
    returns 0.
     */
    public double getValue(char column, int row){
        int c = (char)column-65;
        int R = row-1;
        if (ABSpreadSheet[c][R] == null){
            return (double) 0;
        }
        else if (ABSpreadSheet[c][R] instanceof String){
            return evaluateFormula(column,R);
        }
        else if (ABSpreadSheet[c][R] instanceof Double){
            double value = (double) ABSpreadSheet[c][R];
            return value;
        }
        return 0;
    }
    //----------------------------
    /** *
     * @param cell the cell whose value should be returned. E.g. "A1" or "F9", etc. 
     * @return
     */
    public double getValue(String cell){
        char letter = cell.charAt(0);
        int number = Integer.parseInt(cell.substring(1));
        return getValue(letter, number);
    }
    //------------------------------------
    /**
     * Evaluate the formula held in the given cell 
     * @param column 'A' through 'Z'
     * @param row row number, 1 or greater
     * @return
     */
    public double evaluateFormula(char column, int row){
         
        int c = (char)column-65;
        if (ABSpreadSheet[c][row] instanceof String){
            String [] formulaArray = ((String) (ABSpreadSheet[c][row])).split(" ");
            String operand1 = formulaArray[0];
            String op = formulaArray[1];
            String operand2 = formulaArray[2];
            double x = getValue(operand1);
            double y = getValue(operand2);
            switch(op.charAt(0)){
                case '+':
                    return x+y;
                case '-':
                    return x-y;
                case '*':
                    return x*y;
                case '/':
                    return x/y;
                default:
                    return -1;
            }
        }
        return -1;
    }
}
